{"version":3,"sources":["components/Navigation/Navigation.js","components/Footer/MainFooter.js","components/Selector/Selector.js","components/GraphOptions/SingleSelector/SingleSelector.js","api/api.js","components/GraphOptions/DriversOptions/DriversOptions.js","components/GraphOptions/ConstructorOptions/ConstructorsOptions.js","components/GraphOptions/GraphOptions.js","components/Graph/GraphTypes/Line/Line.js","components/Graph/GraphTypes/Bar/Bar.js","components/Graph/Graph.js","components/ContentSection/ContentSection.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Navigation","props","className","theme","mode","defaultSelectedKeys","Item","onClick","onDataTypeChange","key","Footer","MainFooter","style","textAlign","Option","Select","Selector","useState","children","options","map","value","width","placeholder","placeHolder","defaultValue","onChange","allowClear","onBlur","console","log","onFocus","onSearch","val","SingleSelector","option","push","toString","showSearch","optionFilterProp","filterOption","input","toLowerCase","indexOf","apiURL","getYears","a","fetch","response","json","data","seasons","MRData","SeasonTable","Seasons","season","getDriverInfo","drivers","DriverTable","Drivers","driverId","givenName","familyName","getDriverWins","driver","wins","RaceTable","Races","length","getPolePositions","poles","getFastestLaps","fastestLaps","getLapsLed","round","getConstructorInfo","ConstructorTable","Constructors","constructorId","name","getConstructorWinsAndPoints","constructor","constructorStandings","StandingsTable","StandingsLists","ConstructorStandings","DriversOptions","setSeasons","setDrivers","stats","seasonSelected","setSeasonSelected","driversSelected","setDriversSelected","statSelected","setStatSelected","driversMap","Map","undefined","driversData","set","dataType","years","setSeasonsData","selectors","span","Array","from","keys","statistic","loadDriversData","gutter","justify","ConstructorsOptions","constructors","setConstructors","constructorsSelected","setConstructorsSelected","constructorsMap","loadConstructorData","GraphOptions","stat","onVisualize","constructorMap","Line","myLineChart","Bar","labels","chartRef","useRef","useEffect","myChartRef","current","getContext","destroy","Chart","type","datasets","label","backgroundColor","borderColor","borderWidth","title","display","text","scales","yAxes","ticks","beginAtZero","buildChart","id","ref","Graph","setData","graph","promises","driverMap","get","Promise","all","driverWins","driverPoles","driverFastestLaps","driverLapsLed","constructorWins","points","retrieveDriverData","retrieveConstructorData","Content","driverStats","constructorStats","ContentSection","renderGraph","setRenderGraph","setDriverMap","setConstructorMap","padding","driversMapping","constructorMapping","App","setDataType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6eb6f1e8.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, Menu } from 'antd';\nimport './Navigation.css';\nimport 'antd/dist/antd.css';\n\nconst { Header } = Layout;\n\nfunction Navigation(props) {\n    return (\n        <div className=\"Navigation\">\n            <Header className=\"header\">\n                <div className=\"logo\" >\n                    <p className=\"website-name\">Formula 1 Analytics</p>\n                </div>\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[]}>\n                    <Menu.Item onClick={() => props.onDataTypeChange('drivers')} key=\"drivers\">Drivers</Menu.Item>\n                    <Menu.Item onClick={() => props.onDataTypeChange('constructors')} key=\"constructors\">Constructors</Menu.Item>\n                </Menu>\n            </Header>\n        </div>\n    );\n}\n\nexport default Navigation;\n","import React from 'react';\nimport { Layout } from 'antd';\nimport './MainFooter.css';\nimport 'antd/dist/antd.css';\n\nconst { Footer } = Layout;\n\nfunction MainFooter() {\n  return (\n    <div className=\"MainFooter\">\n        <Footer className=\"footer\" style={{ textAlign: 'center' }}>Created by Andrew H.</Footer>\n    </div>\n  );\n}\n\nexport default MainFooter;\n","import React, { useState } from 'react';\nimport { Select } from 'antd';\nimport './Selector.css';\nimport 'antd/dist/antd.css';\n\nconst { Option } = Select;\n\nfunction Selector(props) {\n    //Insert the available options into the selector\n    //TODO: Need to get options from props and put into useState() param\n    const [options, setOptions] = useState(null);\n\n    const children = props.options.map((value) => {\n        return (<Option value={value}>{value}</Option>);\n    })\n\n    return (\n        <div className=\"selector\">\n            <Select\n                mode=\"multiple\"\n                style={{ width: '100%' }}\n                placeholder={props.placeHolder}\n                defaultValue={[]}\n                onChange={(props.onChange)}\n                allowClear={true}\n            >\n                {children}\n            </Select>\n        </div>\n    );\n}\n\nexport default Selector;\n","import React from 'react';\nimport { Select } from 'antd';\nimport './SingleSelector.css';\nimport 'antd/dist/antd.css';\n\nconst { Option } = Select;\n\nfunction onChange(value) {\n    console.log(`selected ${value}`);\n}\n\nfunction onBlur() {\n    console.log('blur');\n}\n\nfunction onFocus() {\n    console.log('focus');\n}\n\nfunction onSearch(val) {\n    console.log('search:', val);\n}\n\nfunction SingleSelector(props) {\n  console.log(\"Single selector options: \" + props.options);\n  \n  //Load options\n  let options = [];\n\n  props.options.map((option) => {\n      options.push(<Option value={option.toString()}>{option.toString()}</Option>);\n  })\n\n  return (\n    <div className=\"contentSection-layout\">\n      <Select\n        showSearch\n        style={{ width: 200 }}\n        placeholder={props.placeHolder}\n        optionFilterProp=\"children\"\n        onChange={props.onChange}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onSearch={onSearch}\n        filterOption={(input, option) => {\n            return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n        }}\n        allowClear={true}\n        >\n        {options}\n      </Select>\n    </div>\n  );\n}\n\nexport default SingleSelector;\n","let apiURL =  \"https://ergast.com/api/f1\";\n\n/**Get get all seasons/years */\nexport async function getYears() {\n    console.log(\"Getting seasons from API\");\n    const response = await fetch(apiURL + \"/seasons.json?limit=100\");\n    let data = await response.json()\n\n    //Remove extraneous data such as wiki links\n    let seasons = data.MRData.SeasonTable.Seasons.map((value) => {\n        return value.season\n    });\n\n    return seasons;\n}\n\n/**Getting information for drivers */\nexport async function getDriverInfo(season) {\n    const response = await fetch(apiURL + \"/\" + season + \"/drivers.json\");\n    console.log(response);\n    let data = await response.json();\n\n    console.log(data);\n\n    //Only need data for driverId, givenName, and familyName\n    let drivers = data.MRData.DriverTable.Drivers.map((value) => {\n        return {\n            driverId: value.driverId,\n            givenName: value.givenName,\n            familyName: value.familyName\n        }\n    });\n    console.log(drivers);\n    return drivers;\n}\n\nexport async function getDriverWins(season, driver) {\n    const response = await fetch(apiURL + \"/\" + season + \"/drivers/\" + driver + \"/results/1.json?limit=100\");\n    console.log(response);\n    let data = await response.json();\n\n    console.log(data);\n    let wins = data.MRData.RaceTable.Races.length;\n    \n    return wins;\n}\n\nexport async function getPolePositions(season, driver) {\n    const response = await fetch(apiURL + \"/\" + season + \"/drivers/\" + driver + \"/grid/1/results.json?limit=100\");\n    console.log(response);\n    let data = await response.json();\n\n    console.log(data);\n    let poles = data.MRData.RaceTable.Races.length;\n\n    return poles;\n}\n\nexport async function getFastestLaps(season, driver) {\n    const response  = await fetch(apiURL + \"/\" + season + \"/drivers/\" + driver + \"/fastest/1/results.json?limit=100\");\n    console.log(response);\n    let data = await response.json();\n\n    console.log(data)\n    let fastestLaps = data.MRData.RaceTable.Races.length;\n    \n    return fastestLaps;\n}\n\nexport async function getLapsLed(season, driver, round) {\n    const response = await fetch(apiURL + \"/\" + season + \"/\" + round + \"/drivers/\" + driver + \"/laps.json?limit=1000\");\n    console.log(response);\n    let data = await response.json();\n\n    console.log(data);\n    \n    return data;\n}\n\nexport async function getLapsLedAllDrivers(season, round) {\n    const response = await fetch(apiURL + \"/\" + season + \"/\" + round + \"/laps.json?limit=1000\");\n    console.log(response);\n    let data = await response.json();\n\n    console.log(data)\n    \n    return data;\n}\n\n/**Get constructor information */\nexport async function getConstructorInfo(season) {\n    const response = await fetch(apiURL + \"/\" + season + \"/constructors.json\");\n    let data = await response.json();\n\n    console.log(data);\n\n    //Only need data for constructorId and name\n    let drivers = data.MRData.ConstructorTable.Constructors.map((value) => {\n        return {\n            constructorId: value.constructorId,\n            name: value.name\n        }\n    });\n    console.log(drivers);\n    return drivers;\n}\n\nexport async function getConstructorWinsAndPoints(season, constructor) {\n    const response = await fetch(apiURL + \"/\" + season + \"/constructors/\" + constructor + \"/constructorStandings.json\");\n    console.log(response);\n    let data = await response.json();\n\n    console.log(data)\n\n    //Return constructor standings to give option of using number of wins or points (standings)\n    let constructorStandings = data.MRData.StandingsTable.StandingsLists[0].ConstructorStandings[0];\n    console.log(constructorStandings);\n    return constructorStandings;\n}","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport Selector from '../../Selector/Selector';\nimport SingleSelector from '../SingleSelector/SingleSelector';\nimport { getYears, getDriverInfo, getConstructorInfo } from '../../../api/api'\n\nfunction DriversOptions(props) {\n    //Options for drivers\n    const [seasons, setSeasons] = useState(null);\n    const [drivers, setDrivers] = useState(null);\n    const [stats, setStat] = useState(props.stats);\n    const [seasonSelected, setSeasonSelected] = useState(null);\n    const [driversSelected, setDriversSelected] = useState(null);\n    const [statSelected, setStatSelected] = useState(null);\n\n    //Need to convert array into map key: driver full name (givenName + familyName), value: driverId\n    let driversMap = new Map();\n\n    //Functions for changing state of options selected\n    async function selectSeason(season) {\n        //Need to reload possible choices for drivers, constructors, and stats if change in data type\n        console.log(season);\n\n        setDriversSelected(null);\n        setStatSelected(null);\n\n        //If no selection is made then this removes selector for drivers\n        if (season === undefined || season === null) {\n            setSeasonSelected(null);\n            return;\n        }\n\n        //Need to load data for next set of options\n        let driversData = await getDriverInfo(season);\n        console.log(driversData);\n\n\n        \n        driversData.map((driver) => {\n            driversMap.set(driver.givenName + \" \" + driver.familyName, driver.driverId);\n        })\n        console.log(driversMap);\n        //Store drivers as a map\n        setDrivers(driversMap);\n        \n        //Set season\n        setSeasonSelected(season);\n    }\n\n    function selectDrivers(drivers) {\n        //If no selection made then this would remove the statistics selector\n        if (drivers === undefined || drivers.length === 0) {\n            // array empty or does not exist\n            setDriversSelected(null);\n            setStatSelected(null);\n        } else {\n            setDriversSelected(drivers);\n        }\n    }\n\n    function selectStatistic(statistic) {\n        //If no selection made then this would remove the visualize button\n        if (statistic === undefined || statistic.length === 0) {\n            // array empty or does not exist\n            setStatSelected(null);\n        } else {\n            setStatSelected(statistic);\n        }\n    }\n\n    function sendDataForStats() {\n        props.loadDriversData(seasonSelected, driversSelected, statSelected, drivers);\n    }\n\n    async function setSeasonsData() {\n        console.log('use effect');\n        console.log(props.dataType);\n        if (props.dataType !== null) {\n            if (seasons === null) {\n                let years = await getYears();\n                setSeasons(years);\n            }\n        }\n    }\n\n    //Set data for available seasons when \n    setSeasonsData();\n\n    //Populate array with elements depending on type of stats wanted\n    let selectors = [];\n\n    // //Load all seasons\n    // //Only needs to render once\n    // useEffect(async () => {\n        \n    // }, []);\n\n    //Check which selectors need to be rendered depending on existing options that have been selected\n    //Needs to be checked every render\n    console.log(props.dataType);\n    console.log(seasons);\n    console.log(drivers);\n\n    if (seasons !== null) {\n        selectors.push(<Col span={4}><SingleSelector placeHolder=\"Select a season\" onChange={selectSeason} options={seasons}/></Col>);\n    }\n    if (seasonSelected !== null) {\n        selectors.push(<Col span={4}><Selector placeHolder=\"Select drivers\" onChange={selectDrivers} options={Array.from(drivers.keys())}/></Col>);\n    }\n    if (driversSelected !== null) {\n        selectors.push(<Col span={4}><SingleSelector placeHolder=\"Select a statistic\" onChange={selectStatistic} options={stats}/></Col>);\n    }\n    if (statSelected !== null) {\n        selectors.push(<Col onClick={sendDataForStats} span={4}><Button>Visualize</Button></Col>);\n    }\n\n    console.log(selectors);\n\n    return (\n        <Row className=\"driver-wrap flex-container\" gutter={[24, 16]} justify=\"space-between\">\n            {selectors}\n        </Row>\n    );\n}\n\nexport default DriversOptions;\n","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport Selector from '../../Selector/Selector';\nimport SingleSelector from '../SingleSelector/SingleSelector';\nimport { getYears, getDriverInfo, getConstructorInfo } from '../../../api/api'\n\nfunction ConstructorsOptions(props) {\n    //Options for drivers\n    const [seasons, setSeasons] = useState(null);\n    const [constructors, setConstructors] = useState(null);\n    const [stats, setStats] = useState(props.stats);\n    const [seasonSelected, setSeasonSelected] = useState(null);\n    const [constructorsSelected, setConstructorsSelected] = useState(null);\n    const [statSelected, setStatSelected] = useState(null);\n\n    let constructorsMap = new Map();\n\n    //Functions for changing state of options selected\n    async function selectSeason(season) {\n        //Need to reload possible choices for drivers, constructors, and stats if change in data type\n        console.log(season);\n\n        setConstructorsSelected(null);\n        setStatSelected(null);\n\n        //If no selection is made then this removes selector for drivers\n        if (season === undefined || season === null) {\n            setSeasonSelected(null);\n            return;\n        }\n\n        //Need to load data for next set of options\n        let constructors = await getConstructorInfo(season);\n        console.log(constructors);\n\n        \n        constructors.map((constructor) => {\n            constructorsMap.set(constructor.name, constructor.constructorId);\n        })\n\n        //Store constructors as a map\n        setConstructors(constructorsMap);\n        \n        //Set season\n        setSeasonSelected(season);\n    }\n\n    function selectConstructors(constructors) {\n        //If no selection made then this would remove the statistics selector\n        if (constructors === undefined || constructors.length === 0) {\n            // array empty or does not exist\n            setConstructorsSelected(null);\n        } else {\n            setConstructorsSelected(constructors);\n        }\n    }\n\n    function selectStatistic(statistic) {\n        //If no selection made then this would remove the visualize button\n        if (statistic === undefined || statistic.length === 0) {\n            // array empty or does not exist\n            setStatSelected(null);\n        } else {\n            setStatSelected(statistic);\n        }\n    }\n\n    function sendDataForStats() {\n        props.loadConstructorData(seasonSelected, constructorsSelected, statSelected, constructors);\n    }\n\n    async function setSeasonsData() {\n        console.log('use effect');\n        console.log(props.dataType);\n        if (props.dataType !== null) {\n            if (seasons === null) {\n                let years = await getYears();\n                setSeasons(years);\n            }\n        }\n    }\n\n    //Set data for available seasons when \n    setSeasonsData();\n\n    //Populate array with elements depending on type of stats wanted\n    let selectors = [];\n\n    // //Load all seasons\n    // //Only needs to render once\n    // useEffect(async () => {\n        \n    // }, []);\n\n    //Check which selectors need to be rendered depending on existing options that have been selected\n    //Needs to be checked every render\n    console.log(props.dataType);\n    console.log(seasons);\n\n    if (seasons !== null) {\n        selectors.push(<Col span={4}><SingleSelector placeHolder=\"Select a season\" onChange={selectSeason} options={seasons}/></Col>);\n    }\n    if (seasonSelected !== null) {\n        selectors.push(<Col span={4}><Selector placeHolder=\"Select constructors\" onChange={selectConstructors} options={Array.from(constructors.keys())}/></Col>);\n    }\n    if (constructorsSelected !== null) {\n        selectors.push(<Col span={4}><SingleSelector placeHolder=\"Select a statistic\" onChange={selectStatistic} options={stats}/></Col>);\n    }\n    if (statSelected !== null) {\n        selectors.push(<Col span={4}><Button onClick={sendDataForStats}>Visualize</Button></Col>);\n    }\n\n    console.log(selectors);\n\n    return (\n        <Row className=\"ConstructorsOptions flex-container wrap\" gutter={[24, 16]}>\n            {selectors}\n        </Row>\n    );\n}\n\nexport default ConstructorsOptions;\n","import React, { useState, useEffect } from 'react';\nimport './GraphOptions.css';\nimport 'antd/dist/antd.css';\nimport DriversOptions from './DriversOptions/DriversOptions';\nimport ConstructorsOptions from './ConstructorOptions/ConstructorsOptions';\n\nfunction GraphOptions(props) {\n\n    function loadDriversData(season, drivers, stat, driversMap) {\n        props.onVisualize(season, drivers, stat, driversMap);\n    }\n\n    function loadConstructorData(season, constructors, stat, constructorMap) {\n        props.onVisualize(season, constructors, stat, constructorMap);\n    }\n\n    return (\n        <div>\n            {props.dataType === 'drivers' ? <DriversOptions className=\"driver-wrap\" loadDriversData={loadDriversData} stats={props.stats}/> : null}\n            {props.dataType === 'constructors' ? <ConstructorsOptions className=\"constructor-wrap\" loadConstructorData={loadConstructorData} stats={props.stats}/> : null}\n        </div>\n    );\n}\n\nexport default GraphOptions;\n","import React, { useEffect, useRef} from 'react';\nimport Chart from \"chart.js\";\nimport 'antd/dist/antd.css';\n\nfunction Line() {\n  //Chart object\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\");\n\n    new Chart(myChartRef, {\n      type: 'line',\n      data: {\n          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n          datasets: [{\n              label: '# of Votes',\n              data: [12, 19, 3, 5, 2, 3],\n              backgroundColor: [\n                  'rgba(255, 99, 132, 0.2)',\n                  'rgba(54, 162, 235, 0.2)',\n                  'rgba(255, 206, 86, 0.2)',\n                  'rgba(75, 192, 192, 0.2)',\n                  'rgba(153, 102, 255, 0.2)',\n                  'rgba(255, 159, 64, 0.2)'\n              ],\n              borderColor: [\n                  'rgba(255, 99, 132, 1)',\n                  'rgba(54, 162, 235, 1)',\n                  'rgba(255, 206, 86, 1)',\n                  'rgba(75, 192, 192, 1)',\n                  'rgba(153, 102, 255, 1)',\n                  'rgba(255, 159, 64, 1)'\n              ],\n              borderWidth: 1\n          }]\n      },\n      options: {\n          scales: {\n              yAxes: [{\n                  ticks: {\n                      beginAtZero: true\n                  }\n              }]\n          }\n      }\n  });\n  });\n\n  return (\n    <div className=\"graph-layout\">\n      <div className=\"graphContainer\">\n        <canvas\n          id=\"myChart\"\n          ref={chartRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Line;\n","import React, { useEffect, useRef } from 'react';\nimport Chart from \"chart.js\";\nimport 'antd/dist/antd.css';\nlet myLineChart;\n\nfunction Bar({ stat, data, labels }) {\n  //Chart object\n  const chartRef = useRef(null);\n\n  //Keep reference to chart\n  function buildChart() {\n    const myChartRef = chartRef.current.getContext(\"2d\");\n\n    if (typeof myLineChart !== \"undefined\") myLineChart.destroy();\n    console.log(stat)\n\n    myLineChart = new Chart(myChartRef, {\n        type: 'bar',\n        data: {\n            labels: labels,\n            datasets: [{\n                label: stat,\n                data: data,\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(255, 159, 64, 0.2)'\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)'\n                ],\n                borderWidth: 1\n            }]\n        },\n        options: {\n          title: {\n            display: true,\n            text: stat\n          },\n          scales: {\n              yAxes: [{\n                  ticks: {\n                      beginAtZero: true\n                  }\n              }]\n          }\n        }\n    });\n  }\n\n  useEffect(() => {\n    buildChart();\n  });\n\n  return (\n    <div className=\"graph-layout\">\n      <div className=\"graphContainer\">\n        <canvas\n          id=\"myChart\"\n          ref={chartRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Bar;\n","import React, { useEffect, useRef, useState} from 'react';\nimport './Graph.css';\nimport 'antd/dist/antd.css';\nimport Line from './GraphTypes/Line/Line';\nimport Bar from './GraphTypes/Bar/Bar';\nimport { getDriverWins, getPolePositions, getFastestLaps, getLapsLed, getConstructorWinsAndPoints } from '../../api/api';\n\nfunction Graph(props) {\n  const [drivers, setDrivers] = useState(null);\n  const [constructors, setConstructors] = useState(null);\n  const [data, setData] = useState(null);\n  // const [title, setTitle] = useState(null);\n\n  let graph = null;\n\n  //Make API call depending on type of data being requested\n  async function retrieveDriverData() {\n    if (props.dataType === 'drivers') {\n      if (props.stat === 'Number of Wins') {\n        let promises = props.drivers.map(async (driver) => {\n          let data = await getDriverWins(props.season, props.driverMap.get(driver));\n          return data;\n        });\n    \n        //Handle array of promises\n        try {\n          let driverWins = await Promise.all(promises);\n          setData(driverWins);\n          console.log(data);\n        } catch (error) {\n          console.log(error);\n        }\n\n\n      } else if (props.stat === 'Number of Pole Positions') {\n        let promises = props.drivers.map(async (driver) => {\n          let data = await getPolePositions(props.season, props.driverMap.get(driver));\n          return data;\n        });\n    \n        //Handle array of promises\n        try {\n          let driverPoles = await Promise.all(promises);\n          setData(driverPoles);\n        } catch (error) {\n          console.log(error);\n        }\n      } else if (props.stat === 'Number of Fastest Laps') {\n        let promises = props.drivers.map(async (driver) => {\n          let data = await getFastestLaps(props.season, props.driverMap.get(driver));\n          return data;\n        });\n    \n        //Handle array of promises\n        try {\n          let driverFastestLaps = await Promise.all(promises);\n          setData(driverFastestLaps);\n        } catch (error) {\n          console.log(error);\n        }\n      } else if (props.stat === 'Number of Laps Led') {\n        let promises = props.drivers.map(async (driver) => {\n          let data = await getLapsLed(props.season, props.driverMap.get(driver));\n          return data;\n        });\n    \n        //Handle array of promises\n        try {\n          let driverLapsLed = await Promise.all(promises);\n          setData(driverLapsLed);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n  }\n\n  async function retrieveConstructorData() {\n    console.log(props.dataType);\n    if (props.dataType === 'constructors') {\n      console.log(\"constructor pass\");\n      if (props.stat === 'Number of Wins') {\n        let promises = props.constructors.map(async (constructor) => {\n          let data = await getConstructorWinsAndPoints(props.season, props.constructorMap.get(constructor));\n          return data.wins;\n        });\n    \n        //Handle array of promises\n        try {\n          let constructorWins = await Promise.all(promises);\n          setData(constructorWins);\n        } catch (error) {\n          console.log(error);\n        }\n      } else if (props.stat === 'Standings (Total Points)') {\n        let promises = props.constructors.map(async (constructor) => {\n          let data = await getConstructorWinsAndPoints(props.season, props.constructorMap.get(constructor));\n          return data.points;\n        });\n\n        //Handle array of promises\n        try {\n          let constructorWins = await Promise.all(promises);\n          setData(constructorWins);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n  }\n\n  //Call API again everytime season or drivers change\n  useEffect(() => {\n    //Get data from API call to put into graph\n    retrieveDriverData();\n  }, [props.season, props.drivers, props.stat]);\n\n  //Call API again everytime season or constructor changes\n  useEffect(() => {\n    console.log(\"retrieve constructor data\");\n    retrieveConstructorData();\n  }, [props.season, props.constructors, props.stat]);\n\n  console.log(props.stat);\n\n  if (props.dataType === 'drivers') {\n    if (props.stat === 'Number of Wins') {\n      console.log(data);\n      console.log(props.drivers);\n      graph = <Bar stat={props.stat} labels={props.drivers} data={data}/>\n    } else if (props.stat === 'Number of Pole Positions') {\n      console.log(data);\n      console.log(props.drivers);\n      graph = <Bar stat={props.stat} labels={props.drivers} data={data}/>\n    } else if (props.stat === 'Number of Fastest Laps') {\n      console.log(data);\n      console.log(props.drivers);\n      graph = <Bar stat={props.stat} labels={props.drivers} data={data}/>\n    } else if (props.stat === 'Number of Laps Led') {\n      console.log(data);\n      console.log(props.drivers);\n      graph = <Bar stat={props.stat} labels={props.drivers} data={data}/>\n    }\n  } else if (props.dataType === 'constructors') {\n    if (props.stat === 'Number of Wins') {\n      console.log(data);\n      console.log(props.constructors);\n      graph = <Bar stat={props.stat} labels={props.constructors} data={data}/>\n    } else if (props.stat === 'Standings (Total Points)') {\n      console.log(data);\n      console.log(props.constructors);\n      graph = <Bar stat={props.stat} labels={props.constructors} data={data}/>\n    }\n  }\n\n  return (\n    <div>\n      {graph}\n    </div>\n  );\n}\n\nexport default Graph;\n","import React, { useState, useEffect } from 'react';\nimport { Layout } from 'antd';\nimport './ContentSection.css';\nimport 'antd/dist/antd.css';\nimport GraphOptions from '../GraphOptions/GraphOptions';\nimport Graph from '../Graph/Graph';\n\nconst { Content } = Layout;\n\n//Statistics for drivers\nconst driverStats = ['Number of Wins', 'Number of Pole Positions', 'Number of Fastest Laps', 'Number of Laps Led'];\n\n//Statistics for Constructors\nconst constructorStats = ['Number of Wins', 'Standings (Total Points)'];\n\nfunction ContentSection(props) {\n  const [renderGraph, setRenderGraph] = useState(false);\n\n  //Set state for graph input options\n  const [seasonSelected, setSeasonSelected] = useState(null);\n  const [driversSelected, setDriversSelected] = useState(null);\n  const [constructorsSelected, setConstructorsSelected] = useState(null);\n  const [statSelected, setStatSelected] = useState(null);\n  const [driverMap, setDriverMap] = useState(null);\n  const [constructorMap, setConstructorMap] = useState(null);\n\n  function renderDriverData(season, drivers, stat, driversMapping) {\n    //Change the state to allow graph to render\n    setSeasonSelected(season);\n    setDriversSelected(drivers);\n    setStatSelected(stat);\n\n    //Need to get data for graph to render\n    setDriverMap(driversMapping);\n\n    setRenderGraph(true);\n  }\n  \n  function renderConstructorData(season, constructors, stat, constructorMapping) {\n    setSeasonSelected(season);\n    setConstructorsSelected(constructors);\n    setStatSelected(stat);\n\n    //Need to get data for graph to render\n    setConstructorMap(constructorMapping);\n\n    setRenderGraph(true);\n  }\n\n  //Need useEffect to remove graph from view if we change dataType\n  useEffect(() => {\n    setRenderGraph(false);\n  }, [props.dataType])\n\n  console.log(\"Content section: \" + props.dataType);\n  console.log(seasonSelected);\n  console.log(driversSelected);\n  console.log(constructorsSelected);\n  console.log(statSelected);\n  console.log(driverMap);\n\n  return (\n    <div className=\"contentSection-layout\">\n      <Content style={{ padding: '0px' }}>\n        <div className=\"site-layout-content\">\n          {/*TODO: Get options chosen in GraphOptions and send to Graph, then make different \n          graph components to render depending on settings chosen\n          Also need to create JS file for handling API calls\n          Also find way to cache calls for single seasons*/}\n          {props.dataType !== null ? <GraphOptions onVisualize={props.dataType === 'drivers' ? renderDriverData : renderConstructorData} dataType={props.dataType} stats={props.dataType === 'drivers' ? driverStats : constructorStats}/> : null}\n          {renderGraph ? (props.dataType === 'drivers' ? \n          <Graph dataType={props.dataType} season={seasonSelected} drivers={driversSelected} stat={statSelected} driverMap={driverMap}/> :\n          <Graph dataType={props.dataType} season={seasonSelected} constructors={constructorsSelected} stat={statSelected} constructorMap={constructorMap}/>) : null }\n        </div>\n      </Content>\n    </div>\n  );\n}\n\nexport default ContentSection;\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport Navigation from './components/Navigation/Navigation';\nimport MainFooter from './components/Footer/MainFooter';\nimport { Layout } from 'antd';\nimport ContentSection from './components/ContentSection/ContentSection';\n\nfunction App() {\n  //Data type can either be 'drivers' or 'constructors'\n  const [dataType, setDataType] = useState(null);\n\n  function handleDataTypeChange(dataType) {\n    setDataType(dataType);\n    console.log(\"data type changed: \" + dataType);\n  }\n\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Navigation onDataTypeChange={handleDataTypeChange}/>\n        <ContentSection dataType={dataType}/>\n        <MainFooter />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}